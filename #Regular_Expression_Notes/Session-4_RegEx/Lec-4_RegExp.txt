# RegularExpresions Part-4 || How to use Regular Expresions (57:47)

Q1 - WAP to check whether given number is a valid mobile number or not
==> Indian Valid Mobile Number Regular Expression --> (0|(\\+91))?[6-9][0-9]{9}
or we can also write above expression as --> (0|(\\+91))?[6-9]\\d{9}

==> 
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MobileNumberCheckCmd 
{
    public static void main(String[] args) 
    {
        Pattern pt = Pattern.compile("(0|91)?[6-9][0-9]{9}");

        Matcher m = pt.matcher(args[0]);

        if(m.find() && m.group().equals(args[0])) 
        {
            System.out.println("Valid Mobile Number");
        }
        else{
            System.out.println("Invalid Mobile Number!!!");
        }
    }  
}

# so, this is the way we can check whether the given number is valid Mobile number or not

Q2 - WAP to check whether the given mail ID is valid or not
==> In this program we have to replace mobile number Regular Expression with mail Id Regular Expression

==>
import java.util.Scanner;
import java.util.regex.*;

public class EmailId_Check 
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        String mailId = sc.nextLine();

        Pattern pt = Pattern.compile("[a-zA-Z0-9][a-zA-Z0-9_.]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+");

        Matcher m = pt.matcher(mailId);

        if(m.find() && m.group().equals(mailId)) 
        {
            System.out.println("Valid Mail Id");
        }
        else{
            System.out.println("Invalid Mail Id!!!");
        }
        sc.close();        
    }
}

Q3 - WAP to read all Mobile numbers present in the given input file 
where mobile numbers are mixed with normal text data.
==> 
class ReadMobileNumber_File
{
    public static void main(String[] args) throws IOException 
    {
        PrintWriter pw = new PrintWriter("output.txt");

        Pattern pt = Pattern.compile("(0|91)?[6-9][0-9]{9}");

        BufferedReader br = new BufferedReader(new FileReader("input.txt"));

        String line = br.readLine();

        while(line != null)
        {
            Matcher m = pt.matcher(line);
            while(m.find()){
                pw.println(m.group());
            }
            line = br.readLine();
        }
        pw.flush();
    }
}

Q4 - WAP to extract all mail Ids present in the given input file
where mail ids are mixed with normal text data.
==> In the above program we have to replace mobile number Regular Expression with mail Ids Regular Expression.

==>
public class ReadMailIds_File 
{
    public static void main(String[] args) throws IOException 
    {
        PrintWriter pw = new PrintWriter("output1.txt");

        Pattern pt = Pattern.compile("[a-zA-Z0-9][a-zA-Z0-9_.]*@[a-zA-Z0-9]+([.][a-zA-Z]+)+");

        BufferedReader br = new BufferedReader(new FileReader("input1.txt"));

        String line = br.readLine();

        while(line != null)
        {
            Matcher m = pt.matcher(line);
            while(m.find()){
                pw.println(m.group());
            }
            line = br.readLine();
        }
        pw.flush();
    }
}

Q5 - WAP to display all .txt file names present in any folder
==> Filename Regular Expression - [a-zA-Z0-9_.$]+[.]txt

==>
public class DisplayTextFile 
{
    public static void main(String[] args)
    {
        Pattern pt = Pattern.compile("[a-zA-Z0-9_.$]+[.]txt");

        File f = new File("C://Users//NARMISHR//Desktop");

        String[] fnames = f.list();

        int cnt=0;
        for(String str:fnames){
            Matcher m = pt.matcher(str);

            if(m.find() && m.group().equals(str)){
                cnt++;
                System.out.println(str);
            }
        }
        System.out.println("Total number of text file in given folder:"+cnt);
    }
}



